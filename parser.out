Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expr ;
Rule 2     statement -> { }
Rule 3     statement -> { block_item_list }
Rule 4     statement -> WHILE ( expr ) statement
Rule 5     statement -> PRINT statement
Rule 6     statement -> expr ? statement : statement ;
Rule 7     block_item_list -> statement
Rule 8     block_item_list -> block_item_list statement
Rule 9     expr -> term + expr
Rule 10    expr -> term - expr
Rule 11    expr -> term
Rule 12    expr -> NAME = expr
Rule 13    term -> factor * term
Rule 14    term -> factor / term
Rule 15    term -> factor
Rule 16    factor -> ( expr )
Rule 17    factor -> NUM
Rule 18    factor -> NAME

Terminals, with rules where they appear

(                    : 4 16
)                    : 4 16
*                    : 13
+                    : 9
-                    : 10
/                    : 14
:                    : 6
;                    : 1 6
=                    : 12
?                    : 6
NAME                 : 12 18
NUM                  : 17
PRINT                : 5
WHILE                : 4
error                : 
{                    : 2 3
}                    : 2 3

Nonterminals, with rules where they appear

block_item_list      : 3 8
expr                 : 1 4 6 9 10 12 16
factor               : 13 14 15
statement            : 4 5 6 6 7 8 0
term                 : 9 10 11 13 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 6
    factor                         shift and go to state 9

state 1

    (9) expr -> term . + expr
    (10) expr -> term . - expr
    (11) expr -> term .

    +               shift and go to state 12
    -               shift and go to state 11
    ;               reduce using rule 11 (expr -> term .)
    ?               reduce using rule 11 (expr -> term .)
    )               reduce using rule 11 (expr -> term .)


state 2

    (12) expr -> NAME . = expr
    (18) factor -> NAME .

    =               shift and go to state 13
    *               reduce using rule 18 (factor -> NAME .)
    /               reduce using rule 18 (factor -> NAME .)
    +               reduce using rule 18 (factor -> NAME .)
    -               reduce using rule 18 (factor -> NAME .)
    ;               reduce using rule 18 (factor -> NAME .)
    ?               reduce using rule 18 (factor -> NAME .)
    )               reduce using rule 18 (factor -> NAME .)


state 3

    (1) statement -> expr . ;
    (6) statement -> expr . ? statement : statement ;

    ;               shift and go to state 14
    ?               shift and go to state 15


state 4

    (4) statement -> WHILE . ( expr ) statement

    (               shift and go to state 16


state 5

    (17) factor -> NUM .

    *               reduce using rule 17 (factor -> NUM .)
    /               reduce using rule 17 (factor -> NUM .)
    +               reduce using rule 17 (factor -> NUM .)
    -               reduce using rule 17 (factor -> NUM .)
    ;               reduce using rule 17 (factor -> NUM .)
    ?               reduce using rule 17 (factor -> NUM .)
    )               reduce using rule 17 (factor -> NUM .)


state 6

    (0) S' -> statement .



state 7

    (16) factor -> ( . expr )
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 17
    term                           shift and go to state 1
    factor                         shift and go to state 9

state 8

    (5) statement -> PRINT . statement
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 18
    factor                         shift and go to state 9

state 9

    (13) term -> factor . * term
    (14) term -> factor . / term
    (15) term -> factor .

    *               shift and go to state 19
    /               shift and go to state 20
    +               reduce using rule 15 (term -> factor .)
    -               reduce using rule 15 (term -> factor .)
    ;               reduce using rule 15 (term -> factor .)
    ?               reduce using rule 15 (term -> factor .)
    )               reduce using rule 15 (term -> factor .)


state 10

    (2) statement -> { . }
    (3) statement -> { . block_item_list }
    (7) block_item_list -> . statement
    (8) block_item_list -> . block_item_list statement
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    }               shift and go to state 22
    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    block_item_list                shift and go to state 23
    statement                      shift and go to state 21
    factor                         shift and go to state 9

state 11

    (10) expr -> term - . expr
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 24
    term                           shift and go to state 1
    factor                         shift and go to state 9

state 12

    (9) expr -> term + . expr
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 25
    term                           shift and go to state 1
    factor                         shift and go to state 9

state 13

    (12) expr -> NAME = . expr
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 26
    term                           shift and go to state 1
    factor                         shift and go to state 9

state 14

    (1) statement -> expr ; .

    $end            reduce using rule 1 (statement -> expr ; .)
    }               reduce using rule 1 (statement -> expr ; .)
    {               reduce using rule 1 (statement -> expr ; .)
    WHILE           reduce using rule 1 (statement -> expr ; .)
    PRINT           reduce using rule 1 (statement -> expr ; .)
    NAME            reduce using rule 1 (statement -> expr ; .)
    (               reduce using rule 1 (statement -> expr ; .)
    NUM             reduce using rule 1 (statement -> expr ; .)
    :               reduce using rule 1 (statement -> expr ; .)
    ;               reduce using rule 1 (statement -> expr ; .)


state 15

    (6) statement -> expr ? . statement : statement ;
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 27
    factor                         shift and go to state 9

state 16

    (4) statement -> WHILE ( . expr ) statement
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 28
    term                           shift and go to state 1
    factor                         shift and go to state 9

state 17

    (16) factor -> ( expr . )

    )               shift and go to state 29


state 18

    (5) statement -> PRINT statement .

    $end            reduce using rule 5 (statement -> PRINT statement .)
    }               reduce using rule 5 (statement -> PRINT statement .)
    {               reduce using rule 5 (statement -> PRINT statement .)
    WHILE           reduce using rule 5 (statement -> PRINT statement .)
    PRINT           reduce using rule 5 (statement -> PRINT statement .)
    NAME            reduce using rule 5 (statement -> PRINT statement .)
    (               reduce using rule 5 (statement -> PRINT statement .)
    NUM             reduce using rule 5 (statement -> PRINT statement .)
    :               reduce using rule 5 (statement -> PRINT statement .)
    ;               reduce using rule 5 (statement -> PRINT statement .)


state 19

    (13) term -> factor * . term
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    (               shift and go to state 7
    NUM             shift and go to state 5
    NAME            shift and go to state 31

    term                           shift and go to state 30
    factor                         shift and go to state 9

state 20

    (14) term -> factor / . term
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    (               shift and go to state 7
    NUM             shift and go to state 5
    NAME            shift and go to state 31

    term                           shift and go to state 32
    factor                         shift and go to state 9

state 21

    (7) block_item_list -> statement .

    }               reduce using rule 7 (block_item_list -> statement .)
    {               reduce using rule 7 (block_item_list -> statement .)
    WHILE           reduce using rule 7 (block_item_list -> statement .)
    PRINT           reduce using rule 7 (block_item_list -> statement .)
    NAME            reduce using rule 7 (block_item_list -> statement .)
    (               reduce using rule 7 (block_item_list -> statement .)
    NUM             reduce using rule 7 (block_item_list -> statement .)


state 22

    (2) statement -> { } .

    $end            reduce using rule 2 (statement -> { } .)
    }               reduce using rule 2 (statement -> { } .)
    {               reduce using rule 2 (statement -> { } .)
    WHILE           reduce using rule 2 (statement -> { } .)
    PRINT           reduce using rule 2 (statement -> { } .)
    NAME            reduce using rule 2 (statement -> { } .)
    (               reduce using rule 2 (statement -> { } .)
    NUM             reduce using rule 2 (statement -> { } .)
    :               reduce using rule 2 (statement -> { } .)
    ;               reduce using rule 2 (statement -> { } .)


state 23

    (3) statement -> { block_item_list . }
    (8) block_item_list -> block_item_list . statement
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    }               shift and go to state 34
    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 33
    factor                         shift and go to state 9

state 24

    (10) expr -> term - expr .

    ;               reduce using rule 10 (expr -> term - expr .)
    ?               reduce using rule 10 (expr -> term - expr .)
    )               reduce using rule 10 (expr -> term - expr .)


state 25

    (9) expr -> term + expr .

    ;               reduce using rule 9 (expr -> term + expr .)
    ?               reduce using rule 9 (expr -> term + expr .)
    )               reduce using rule 9 (expr -> term + expr .)


state 26

    (12) expr -> NAME = expr .

    ;               reduce using rule 12 (expr -> NAME = expr .)
    ?               reduce using rule 12 (expr -> NAME = expr .)
    )               reduce using rule 12 (expr -> NAME = expr .)


state 27

    (6) statement -> expr ? statement . : statement ;

    :               shift and go to state 35


state 28

    (4) statement -> WHILE ( expr . ) statement

    )               shift and go to state 36


state 29

    (16) factor -> ( expr ) .

    *               reduce using rule 16 (factor -> ( expr ) .)
    /               reduce using rule 16 (factor -> ( expr ) .)
    +               reduce using rule 16 (factor -> ( expr ) .)
    -               reduce using rule 16 (factor -> ( expr ) .)
    ;               reduce using rule 16 (factor -> ( expr ) .)
    ?               reduce using rule 16 (factor -> ( expr ) .)
    )               reduce using rule 16 (factor -> ( expr ) .)


state 30

    (13) term -> factor * term .

    +               reduce using rule 13 (term -> factor * term .)
    -               reduce using rule 13 (term -> factor * term .)
    ;               reduce using rule 13 (term -> factor * term .)
    ?               reduce using rule 13 (term -> factor * term .)
    )               reduce using rule 13 (term -> factor * term .)


state 31

    (18) factor -> NAME .

    *               reduce using rule 18 (factor -> NAME .)
    /               reduce using rule 18 (factor -> NAME .)
    +               reduce using rule 18 (factor -> NAME .)
    -               reduce using rule 18 (factor -> NAME .)
    ;               reduce using rule 18 (factor -> NAME .)
    ?               reduce using rule 18 (factor -> NAME .)
    )               reduce using rule 18 (factor -> NAME .)


state 32

    (14) term -> factor / term .

    +               reduce using rule 14 (term -> factor / term .)
    -               reduce using rule 14 (term -> factor / term .)
    ;               reduce using rule 14 (term -> factor / term .)
    ?               reduce using rule 14 (term -> factor / term .)
    )               reduce using rule 14 (term -> factor / term .)


state 33

    (8) block_item_list -> block_item_list statement .

    }               reduce using rule 8 (block_item_list -> block_item_list statement .)
    {               reduce using rule 8 (block_item_list -> block_item_list statement .)
    WHILE           reduce using rule 8 (block_item_list -> block_item_list statement .)
    PRINT           reduce using rule 8 (block_item_list -> block_item_list statement .)
    NAME            reduce using rule 8 (block_item_list -> block_item_list statement .)
    (               reduce using rule 8 (block_item_list -> block_item_list statement .)
    NUM             reduce using rule 8 (block_item_list -> block_item_list statement .)


state 34

    (3) statement -> { block_item_list } .

    $end            reduce using rule 3 (statement -> { block_item_list } .)
    }               reduce using rule 3 (statement -> { block_item_list } .)
    {               reduce using rule 3 (statement -> { block_item_list } .)
    WHILE           reduce using rule 3 (statement -> { block_item_list } .)
    PRINT           reduce using rule 3 (statement -> { block_item_list } .)
    NAME            reduce using rule 3 (statement -> { block_item_list } .)
    (               reduce using rule 3 (statement -> { block_item_list } .)
    NUM             reduce using rule 3 (statement -> { block_item_list } .)
    :               reduce using rule 3 (statement -> { block_item_list } .)
    ;               reduce using rule 3 (statement -> { block_item_list } .)


state 35

    (6) statement -> expr ? statement : . statement ;
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 37
    factor                         shift and go to state 9

state 36

    (4) statement -> WHILE ( expr ) . statement
    (1) statement -> . expr ;
    (2) statement -> . { }
    (3) statement -> . { block_item_list }
    (4) statement -> . WHILE ( expr ) statement
    (5) statement -> . PRINT statement
    (6) statement -> . expr ? statement : statement ;
    (9) expr -> . term + expr
    (10) expr -> . term - expr
    (11) expr -> . term
    (12) expr -> . NAME = expr
    (13) term -> . factor * term
    (14) term -> . factor / term
    (15) term -> . factor
    (16) factor -> . ( expr )
    (17) factor -> . NUM
    (18) factor -> . NAME

    {               shift and go to state 10
    WHILE           shift and go to state 4
    PRINT           shift and go to state 8
    NAME            shift and go to state 2
    (               shift and go to state 7
    NUM             shift and go to state 5

    expr                           shift and go to state 3
    term                           shift and go to state 1
    statement                      shift and go to state 38
    factor                         shift and go to state 9

state 37

    (6) statement -> expr ? statement : statement . ;

    ;               shift and go to state 39


state 38

    (4) statement -> WHILE ( expr ) statement .

    $end            reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    }               reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    {               reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    WHILE           reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    PRINT           reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    NAME            reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    (               reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    NUM             reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    :               reduce using rule 4 (statement -> WHILE ( expr ) statement .)
    ;               reduce using rule 4 (statement -> WHILE ( expr ) statement .)


state 39

    (6) statement -> expr ? statement : statement ; .

    $end            reduce using rule 6 (statement -> expr ? statement : statement ; .)
    }               reduce using rule 6 (statement -> expr ? statement : statement ; .)
    {               reduce using rule 6 (statement -> expr ? statement : statement ; .)
    WHILE           reduce using rule 6 (statement -> expr ? statement : statement ; .)
    PRINT           reduce using rule 6 (statement -> expr ? statement : statement ; .)
    NAME            reduce using rule 6 (statement -> expr ? statement : statement ; .)
    (               reduce using rule 6 (statement -> expr ? statement : statement ; .)
    NUM             reduce using rule 6 (statement -> expr ? statement : statement ; .)
    :               reduce using rule 6 (statement -> expr ? statement : statement ; .)
    ;               reduce using rule 6 (statement -> expr ? statement : statement ; .)

