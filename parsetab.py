
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D3B359E3A2E90003BB04FFA99CFB3813'
    
_lr_action_items = {'NAME':([0,5,8,9,10,11,13,14,15,16,22,23,],[2,2,2,2,2,-1,21,-4,-2,2,-5,-3,]),')':([1,2,4,7,12,17,18,19,20,21,],[-7,-13,-12,-10,19,-6,-8,-11,-9,-13,]),'(':([0,5,8,9,10,11,13,14,15,16,22,23,],[5,5,5,5,5,-1,5,-4,-2,5,-5,-3,]),'+':([1,2,4,7,19,20,21,],[9,-13,-12,-10,-11,-9,-13,]),'*':([2,4,7,19,21,],[-13,-12,13,-11,-13,]),'}':([8,11,14,15,16,22,23,],[15,-1,-4,-2,23,-5,-3,]),'NUM':([0,5,8,9,10,11,13,14,15,16,22,23,],[4,4,4,4,4,-1,4,-4,-2,4,-5,-3,]),'{':([0,8,11,14,15,16,22,23,],[8,8,-1,-4,-2,8,-5,-3,]),'=':([2,],[10,]),';':([1,2,3,4,7,17,18,19,20,21,],[-7,-13,11,-12,-10,-6,-8,-11,-9,-13,]),'$end':([6,11,15,23,],[0,-1,-2,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,5,8,9,10,16,],[3,12,3,17,18,3,]),'term':([0,5,8,9,10,13,16,],[1,1,1,1,1,20,1,]),'block_item_list':([8,],[16,]),'statement':([0,8,16,],[6,14,22,]),'factor':([0,5,8,9,10,13,16,],[7,7,7,7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expr ;','statement',2,'p_statement_a','calcParseTreeVariablesAndBlock.py',110),
  ('statement -> { }','statement',2,'p_statement_b','calcParseTreeVariablesAndBlock.py',114),
  ('statement -> { block_item_list }','statement',3,'p_statement_c','calcParseTreeVariablesAndBlock.py',121),
  ('block_item_list -> statement','block_item_list',1,'p_block_item_list_a','calcParseTreeVariablesAndBlock.py',128),
  ('block_item_list -> block_item_list statement','block_item_list',2,'p_block_item_list_b','calcParseTreeVariablesAndBlock.py',132),
  ('expr -> term + expr','expr',3,'p_expr_a','calcParseTreeVariablesAndBlock.py',137),
  ('expr -> term','expr',1,'p_expr_b','calcParseTreeVariablesAndBlock.py',144),
  ('expr -> NAME = expr','expr',3,'p_expr_c','calcParseTreeVariablesAndBlock.py',148),
  ('term -> factor * term','term',3,'p_term_a','calcParseTreeVariablesAndBlock.py',155),
  ('term -> factor','term',1,'p_term_b','calcParseTreeVariablesAndBlock.py',162),
  ('factor -> ( expr )','factor',3,'p_factor_a','calcParseTreeVariablesAndBlock.py',166),
  ('factor -> NUM','factor',1,'p_factor_b','calcParseTreeVariablesAndBlock.py',170),
  ('factor -> NAME','factor',1,'p_factor_c','calcParseTreeVariablesAndBlock.py',177),
]
